EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
loop.exe_ -- emu8086 assembler version: 4.08  
 
[ 5/2/2025  --  7:10:41 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       .data
[   4]    0100: 48 65 6C 6C 6F 21 24                  msg db 'Hello!$'
[   5]        :                                       .code
[   6]    0110:                                       main proc
[   7]        :                                       
[   8]    0110: B8 10 00                              mov ax, @data
[   9]    0113: 8E D8                                 mov ds, ax
[  10]        :                                       
[  11]    0115: B9 05 00                              mov cx , 5
[  12]        :                                       
[  13]    0118:                                       start_loop:
[  14]        :                                       
[  15]    0118: BA 00 00                              mov dx, offset msg
[  16]    011B: B4 09                                 mov ah, 09h
[  17]    011D: CD 21                                 int 21h
[  18]        :                                       
[  19]    011F: BA 0D 00                              mov dx, 0Dh
[  20]    0122: B4 02                                 mov ah, 2
[  21]    0124: CD 21                                 int 21h
[  22]        :                                       
[  23]    0126: BA 0A 00                              mov dx, 0Ah
[  24]    0129: B4 02                                 mov ah, 2
[  25]    012B: CD 21                                 int 21h
[  26]        :                                       
[  27]    012D: E2 E9                                 loop start_loop
[  28]        :                                       
[  29]    012F: B4 4C                                 mov ah, 4ch
[  30]    0131: CD 21                                 int 21h
[  31]        :                                       
[  32]        :                                       main endp
[  33]        :                                       
[  34]        :                                       end main
[  35]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 33      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 9A      -   check sum (l.byte)
0013: DC      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 11      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 11      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
